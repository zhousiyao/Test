设计模式列表：
    └ 工厂模式-factory
        1、简单工厂
            优点: 创建解耦，写法简单
            缺点：不符合开闭原则，要新增一种产品需要修改原来的工厂类
        2、工厂方法
            优点：适用于需要大量创建重复对象的场景；创建解耦，每次有新的产品不需要修改已有的工厂类； 保证了单一原则；
            缺点：增加了类的个数，提高了阅读难度
        3、抽象工厂
            优点：结构清晰，抽象工厂才感觉更像一个完整的工厂模式
            缺点：写法复杂，有点阅读难度
    └ 单例模式-singleton
    └ 建造者模式-builder
    └ 观察者模式-observer
    └ 装饰者模式-decorator
        概念： 继承关系的一种替代方案之一
        定义： 动态地给一个对象添加一些额外的功能（类似加装备）
    └ 原型模式-clone
        定义：克隆/复制
        场景：例如频繁创建对象的场景，创建对象的过程需要消耗非常多的资源
        优点：在同一个类需要被多个地方使用时，通过clone可以不用频繁的new对象，节省资源开销
        缺点：默认clone是浅拷贝，针对引用类型变更会影响到原型数据
        实现：
            1、实现Cloneable接口重写clone函数，通过调用clone函数实现克隆（这种方式不一定比new一个对象快）
                注：①、通过clone函数创建的对象不会执行构造函数，这是一种浅拷贝
                    ②、当需要clone对象参数过多，建议使用new Object而不是 super.clone
            2、深拷贝： ①、在clone函数中将引用类型也同样操作一次clone
                       ②、序列化、反序列化
    └ 适配器模式-adapter
        定义：把一个类的接口转换成业务所所需要的Target接口
    └ 代理模式-proxy
        定义：中介隔离，开闭原则(虚的) ； 不做实际的方法实现（非增强模式下），间接调用委托类的方法
    └ 责任链模式
    └ 策略模式
    └ 备忘录模式